// This file was automatically generated by informer-gen

package v1alpha2

import (
	idling_v1alpha2 "github.com/openshift/origin-idler/pkg/apis/idling/v1alpha2"
	clientset "github.com/openshift/origin-idler/pkg/client/clientset_generated/clientset"
	internalinterfaces "github.com/openshift/origin-idler/pkg/client/informers_generated/externalversions/internalinterfaces"
	v1alpha2 "github.com/openshift/origin-idler/pkg/client/listers_generated/idling/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// IdlerInformer provides access to a shared informer and lister for
// Idlers.
type IdlerInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha2.IdlerLister
}

type idlerInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewIdlerInformer constructs a new informer for Idler type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewIdlerInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredIdlerInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredIdlerInformer constructs a new informer for Idler type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredIdlerInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IdlingV1alpha2().Idlers(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IdlingV1alpha2().Idlers(namespace).Watch(options)
			},
		},
		&idling_v1alpha2.Idler{},
		resyncPeriod,
		indexers,
	)
}

func (f *idlerInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredIdlerInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *idlerInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&idling_v1alpha2.Idler{}, f.defaultInformer)
}

func (f *idlerInformer) Lister() v1alpha2.IdlerLister {
	return v1alpha2.NewIdlerLister(f.Informer().GetIndexer())
}
