package idling

import (
	"fmt"
	"github.com/kubernetes-sigs/kubebuilder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalIdler = builders.NewInternalResource(
		"idlers",
		"Idler",
		func() runtime.Object { return &Idler{} },
		func() runtime.Object { return &IdlerList{} },
	)
	InternalIdlerStatus = builders.NewInternalResourceStatus(
		"idlers",
		"IdlerStatus",
		func() runtime.Object { return &Idler{} },
		func() runtime.Object { return &IdlerList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("idling.openshift.io").WithKinds(
		InternalIdler,
		InternalIdlerStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Idler struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   IdlerSpec
	Status IdlerStatus
}

type IdlerSpec struct {
	WantIdle            bool
	TargetScalables     []CrossGroupObjectReference
	TriggerServiceNames []string
}

type IdlerStatus struct {
	Idled         bool
	UnidledScales []UnidleInfo
}

type CrossGroupObjectReference struct {
	Group    string
	Resource string
	Name     string
}

type UnidleInfo struct {
	CrossGroupObjectReference
	PreviousScale int32
}

//
// Idler Functions and Structs
//
// +k8s:deepcopy-gen=false
type IdlerStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type IdlerStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type IdlerList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Idler
}

func (Idler) NewStatus() interface{} {
	return IdlerStatus{}
}

func (pc *Idler) GetStatus() interface{} {
	return pc.Status
}

func (pc *Idler) SetStatus(s interface{}) {
	pc.Status = s.(IdlerStatus)
}

func (pc *Idler) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Idler) SetSpec(s interface{}) {
	pc.Spec = s.(IdlerSpec)
}

func (pc *Idler) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Idler) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Idler) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Idler.
// +k8s:deepcopy-gen=false
type IdlerRegistry interface {
	ListIdlers(ctx request.Context, options *internalversion.ListOptions) (*IdlerList, error)
	GetIdler(ctx request.Context, id string, options *metav1.GetOptions) (*Idler, error)
	CreateIdler(ctx request.Context, id *Idler) (*Idler, error)
	UpdateIdler(ctx request.Context, id *Idler) (*Idler, error)
	DeleteIdler(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewIdlerRegistry(sp builders.StandardStorageProvider) IdlerRegistry {
	return &storageIdler{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageIdler struct {
	builders.StandardStorageProvider
}

func (s *storageIdler) ListIdlers(ctx request.Context, options *internalversion.ListOptions) (*IdlerList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*IdlerList), err
}

func (s *storageIdler) GetIdler(ctx request.Context, id string, options *metav1.GetOptions) (*Idler, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Idler), nil
}

func (s *storageIdler) CreateIdler(ctx request.Context, object *Idler) (*Idler, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Idler), nil
}

func (s *storageIdler) UpdateIdler(ctx request.Context, object *Idler) (*Idler, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Idler), nil
}

func (s *storageIdler) DeleteIdler(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
