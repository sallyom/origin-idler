package v1alpha2

import (
	"github.com/kubernetes-sigs/kubebuilder/pkg/builders"
	"github.com/openshift/origin-idler/pkg/apis/idling"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	// Define CRDs for resources
	IdlerCRD = v1beta1.CustomResourceDefinition{
		ObjectMeta: metav1.ObjectMeta{
			Name: "idlers.idling.openshift.io",
		},
		Spec: v1beta1.CustomResourceDefinitionSpec{
			Group:   "idling.openshift.io",
			Version: "v1alpha2",
			Names: v1beta1.CustomResourceDefinitionNames{
				Kind:   "Idler",
				Plural: "idlers",
			},
			Scope: "Namespaced",
			Validation: &v1beta1.CustomResourceValidation{
				OpenAPIV3Schema: &v1beta1.JSONSchemaProps{
					Type: "object",
					Properties: map[string]v1beta1.JSONSchemaProps{
						"apiVersion": {Type: "string"},
						"kind":       {Type: "string"},
						"metadata": {
							Type: "object",
						},
						"spec": {
							Type:       "object",
							Properties: map[string]v1beta1.JSONSchemaProps{},
						},
						"status": {
							Type:       "object",
							Properties: map[string]v1beta1.JSONSchemaProps{},
						},
					},
				},
			},
		},
	}
	/*
	   JSON Schema
	   {
	       "type": "object",
	       "properties": {
	           "apiVersion": {
	               "type": "string"
	           },
	           "kind": {
	               "type": "string"
	           },
	           "metadata": {
	               "type": "object"
	           },
	           "spec": {
	               "type": "object"
	           },
	           "status": {
	               "type": "object"
	           }
	       }
	   }
	*/

	// Collect CRDs in this group version
	CRDs = []v1beta1.CustomResourceDefinition{
		IdlerCRD,
	}

	// Register APIs
	idlingIdlerStorage = builders.NewApiResource( // Resource status endpoint
		idling.InternalIdler,
		IdlerSchemeFns{},
		func() runtime.Object { return &Idler{} },     // Register versioned resource
		func() runtime.Object { return &IdlerList{} }, // Register versioned resource list
		&IdlerStrategy{builders.StorageStrategySingleton},
	)
	ApiVersion = builders.NewApiVersion("idling.openshift.io", "v1alpha2").WithResources(
		idlingIdlerStorage,
		builders.NewApiResource( // Resource status endpoint
			idling.InternalIdlerStatus,
			IdlerSchemeFns{},
			func() runtime.Object { return &Idler{} },     // Register versioned resource
			func() runtime.Object { return &IdlerList{} }, // Register versioned resource list
			&IdlerStatusStrategy{builders.StatusStorageStrategySingleton},
		))

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

//
// Idler Functions and Structs
//
// +k8s:deepcopy-gen=false
type IdlerSchemeFns struct {
	builders.DefaultSchemeFns
}

// +k8s:deepcopy-gen=false
type IdlerStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type IdlerStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type IdlerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Idler `json:"items"`
}
